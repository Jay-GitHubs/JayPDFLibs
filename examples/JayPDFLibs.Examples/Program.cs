// examples/JayPDFLibs.Examples/Program.cs
using JayPDFLibs.Core.Document;

namespace JayPDFLibs.Examples
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("JayPDFLibs - Enhanced Examples");
            Console.WriteLine("===============================");

            // Create output directory if it doesn't exist
            var outputDir = "output";
            if (!Directory.Exists(outputDir))
            {
                Directory.CreateDirectory(outputDir);
                Console.WriteLine($"üìÅ Created output directory: {outputDir}");
            }

            try
            {
                // Example 1: Basic PDF
                CreateBasicPDF(outputDir);

                // Example 2: Multi-page PDF
                CreateMultiPagePDF(outputDir);

                // Example 3: Thai Language PDF
                CreateThaiPDF(outputDir);

                // Example 4: Different Page Sizes
                CreateDifferentPageSizes(outputDir);

                Console.WriteLine("\n‚úÖ All examples completed successfully!");
                Console.WriteLine("\nGenerated files in 'output' directory:");
                Console.WriteLine("  - basic-example.pdf");
                Console.WriteLine("  - multi-page-example.pdf");
                Console.WriteLine("  - thai-example.pdf");
                Console.WriteLine("  - page-sizes-example.pdf");
                
                Console.WriteLine("\nüí° You can now open these PDF files in any PDF reader!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                Console.WriteLine("\nüîß If you see this error, please check:");
                Console.WriteLine("  1. All project references are correct");
                Console.WriteLine("  2. The output directory has write permissions");
                Console.WriteLine("  3. No other application is using the PDF files");
            }

            Console.WriteLine("\nPress any key to exit...");
            Console.ReadKey();
        }

        static void CreateBasicPDF(string outputDir)
        {
            Console.WriteLine("\nüìÑ Creating basic PDF...");

            try
            {
                using var document = new PdfDocument
                {
                    Title = "Basic Example - JayPDFLibs",
                    Author = "JayPDFLibs User"
                };

                var page = document.AddPage(PageSize.A4);
                
                // Add header
                page.AddText("JayPDFLibs - Basic Example", 100, 750, "Helvetica", 20)
                    .AddText("Your First PDF Document", 100, 720, "Helvetica", 16);

                // Add content
                page.AddText("Hello, World!", 100, 680, "Helvetica", 14)
                    .AddText("This is your first PDF created with JayPDFLibs!", 100, 660, "Helvetica", 12)
                    .AddText("Created on: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"), 100, 640, "Helvetica", 10)
                    .AddText("Page size: A4", 100, 620, "Helvetica", 10)
                    .AddText("Page dimensions: " + page.Width + " x " + page.Height + " points", 100, 600, "Helvetica", 10);

                // Add footer
                page.AddText("Generated by JayPDFLibs v1.0", 100, 100, "Helvetica", 8)
                    .AddText("https://github.com/Jay-GitHubs/JayPDFLibs", 100, 85, "Helvetica", 8);

                var filePath = Path.Combine(outputDir, "basic-example.pdf");
                document.SaveToFile(filePath);
                Console.WriteLine($"‚úì Saved: {filePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error creating basic PDF: {ex.Message}");
                throw;
            }
        }

        static void CreateMultiPagePDF(string outputDir)
        {
            Console.WriteLine("\nüìö Creating multi-page PDF...");

            try
            {
                using var document = new PdfDocument
                {
                    Title = "Multi-Page Document Example",
                    Author = "JayPDFLibs Demo"
                };

                // Page 1: Title page
                var titlePage = document.AddPage(PageSize.A4);
                titlePage.AddText("JayPDFLibs", 250, 500, "Helvetica", 28)
                         .AddText("Multi-Page Document Example", 180, 460, "Helvetica", 18)
                         .AddText("Demonstrating Multiple Pages", 200, 430, "Helvetica", 14)
                         .AddText("Generated on " + DateTime.Now.ToString("MMMM dd, yyyy"), 220, 400, "Helvetica", 12)
                         .AddText("Page 1 of 3", 270, 50, "Helvetica", 10);

                // Page 2: Content page
                var contentPage = document.AddPage(PageSize.A4);
                contentPage.AddText("Chapter 1: Introduction", 100, 750, "Helvetica", 18)
                          .AddText("Welcome to JayPDFLibs!", 100, 720, "Helvetica", 14)
                          .AddText("This library provides comprehensive PDF generation capabilities", 100, 700, "Helvetica", 12)
                          .AddText("with special focus on Thai language support.", 100, 685, "Helvetica", 12)
                          .AddText("", 100, 665, "Helvetica", 12) // Empty line
                          .AddText("Key Features:", 100, 645, "Helvetica", 14)
                          .AddText("‚Ä¢ Create PDF documents from scratch", 120, 625, "Helvetica", 12)
                          .AddText("‚Ä¢ Support for multiple page sizes", 120, 610, "Helvetica", 12)
                          .AddText("‚Ä¢ Thai language text rendering", 120, 595, "Helvetica", 12)
                          .AddText("‚Ä¢ Template-based document generation", 120, 580, "Helvetica", 12)
                          .AddText("‚Ä¢ CSV, JSON, and database integration", 120, 565, "Helvetica", 12)
                          .AddText("Page 2 of 3", 270, 50, "Helvetica", 10);

                // Page 3: Technical details
                var techPage = document.AddPage(PageSize.A4);
                techPage.AddText("Chapter 2: Technical Specifications", 100, 750, "Helvetica", 18)
                        .AddText("System Requirements:", 100, 720, "Helvetica", 14)
                        .AddText("‚Ä¢ .NET 8.0 or later", 120, 700, "Helvetica", 12)
                        .AddText("‚Ä¢ Windows, macOS, or Linux", 120, 685, "Helvetica", 12)
                        .AddText("‚Ä¢ Minimum 512MB RAM", 120, 670, "Helvetica", 12)
                        .AddText("", 100, 650, "Helvetica", 12) // Empty line
                        .AddText("Supported Formats:", 100, 630, "Helvetica", 14)
                        .AddText("‚Ä¢ PDF 1.4 specification", 120, 610, "Helvetica", 12)
                        .AddText("‚Ä¢ UTF-8 text encoding", 120, 595, "Helvetica", 12)
                        .AddText("‚Ä¢ TrueType font embedding", 120, 580, "Helvetica", 12)
                        .AddText("‚Ä¢ JPEG and PNG images", 120, 565, "Helvetica", 12)
                        .AddText("", 100, 545, "Helvetica", 12) // Empty line
                        .AddText("For more information, visit our GitHub repository:", 100, 525, "Helvetica", 12)
                        .AddText("https://github.com/Jay-GitHubs/JayPDFLibs", 100, 510, "Helvetica", 10)
                        .AddText("Page 3 of 3", 270, 50, "Helvetica", 10);

                var filePath = Path.Combine(outputDir, "multi-page-example.pdf");
                document.SaveToFile(filePath);
                Console.WriteLine($"‚úì Saved: {filePath} ({document.PageCount} pages)");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error creating multi-page PDF: {ex.Message}");
                throw;
            }
        }

        static void CreateThaiPDF(string outputDir)
        {
            Console.WriteLine("\nüáπüá≠ Creating Thai language PDF...");

            try
            {
                using var document = new PdfDocument
                {
                    Title = "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
                    Author = "‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤ JayPDFLibs"
                };

                var page = document.AddPage(PageSize.A4);
                
                // Thai header
                page.AddText("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", 100, 750, "Helvetica", 20)
                    .AddText("Thai Language PDF Document", 100, 725, "Helvetica", 16);

                // Thai content
                page.AddText("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà JayPDFLibs", 100, 690, "Helvetica", 14)
                    .AddText("‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤ C#", 100, 670, "Helvetica", 12)
                    .AddText("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå", 100, 650, "Helvetica", 12);

                // Mixed content
                page.AddText("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏™‡∏° / Mixed Content:", 100, 620, "Helvetica", 14)
                    .AddText("Hello ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ World ‡πÇ‡∏•‡∏Å", 100, 600, "Helvetica", 12)
                    .AddText("English + ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ = Perfect!", 100, 580, "Helvetica", 12);

                // Thai numbers
                page.AddText("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏ó‡∏¢ / Thai Numbers:", 100, 550, "Helvetica", 14)
                    .AddText("Thai: ‡πê ‡πë ‡πí ‡πì ‡πî ‡πï ‡πñ ‡πó ‡πò ‡πô", 100, 530, "Helvetica", 12)
                    .AddText("Arabic: 0 1 2 3 4 5 6 7 8 9", 100, 510, "Helvetica", 12)
                    .AddText("Example: ‡πë‡πí‡πì‡πî‡πï = 12345", 100, 490, "Helvetica", 12);

                // Date in Thai
                page.AddText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà / Date:", 100, 460, "Helvetica", 14)
                    .AddText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: " + DateTime.Now.ToString("dd/MM/yyyy"), 100, 440, "Helvetica", 12)
                    .AddText("Document created: " + DateTime.Now.ToString("MMMM dd, yyyy"), 100, 420, "Helvetica", 12);

                // Technical note
                page.AddText("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ / Technical Note:", 100, 380, "Helvetica", 12)
                    .AddText("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTF-8", 100, 360, "Helvetica", 10)
                    .AddText("Thai text in this document is stored in UTF-8 encoding", 100, 345, "Helvetica", 10)
                    .AddText("‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", 100, 330, "Helvetica", 10)
                    .AddText("Full rendering support will be available in the next version", 100, 315, "Helvetica", 10);

                // Footer
                page.AddText("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ JayPDFLibs / Generated by JayPDFLibs", 100, 100, "Helvetica", 8);

                var filePath = Path.Combine(outputDir, "thai-example.pdf");
                document.SaveToFile(filePath);
                Console.WriteLine($"‚úì Saved: {filePath}");
                Console.WriteLine("  üìù Note: Thai text is stored correctly but may display as Unicode");
                Console.WriteLine("      characters until Thai font support is implemented.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error creating Thai PDF: {ex.Message}");
                throw;
            }
        }

        static void CreateDifferentPageSizes(string outputDir)
        {
            Console.WriteLine("\nüìè Creating PDF with different page sizes...");

            try
            {
                using var document = new PdfDocument
                {
                    Title = "Page Sizes Demonstration",
                    Author = "JayPDFLibs Demo"
                };

                // A4 page (210 √ó 297 mm)
                var a4Page = document.AddPage(PageSize.A4);
                a4Page.AddText("A4 Page Size", 100, 750, "Helvetica", 20)
                      .AddText($"Dimensions: {a4Page.Width} x {a4Page.Height} points", 100, 720, "Helvetica", 14)
                      .AddText("Standard: 210 √ó 297 mm (8.27 √ó 11.69 inches)", 100, 700, "Helvetica", 12)
                      .AddText("Most common page size worldwide", 100, 680, "Helvetica", 12)
                      .AddText("Used in: Europe, Asia, Africa, Oceania", 100, 660, "Helvetica", 12)
                      .AddText("Perfect for: Letters, reports, books", 100, 640, "Helvetica", 12)
                      .AddText("Page 1 of 3 - A4 Format", 100, 50, "Helvetica", 10);

                // Letter page (8.5 √ó 11 inches)
                var letterPage = document.AddPage(PageSize.Letter);
                letterPage.AddText("Letter Page Size", 100, 750, "Helvetica", 20)
                          .AddText($"Dimensions: {letterPage.Width} x {letterPage.Height} points", 100, 720, "Helvetica", 14)
                          .AddText("Standard: 8.5 √ó 11 inches (216 √ó 279 mm)", 100, 700, "Helvetica", 12)
                          .AddText("Common in North America", 100, 680, "Helvetica", 12)
                          .AddText("Used in: USA, Canada, Mexico", 100, 660, "Helvetica", 12)
                          .AddText("Perfect for: Business letters, forms", 100, 640, "Helvetica", 12)
                          .AddText("Slightly wider and shorter than A4", 100, 620, "Helvetica", 12)
                          .AddText("Page 2 of 3 - Letter Format", 100, 50, "Helvetica", 10);

                // A3 page (297 √ó 420 mm)
                var a3Page = document.AddPage(PageSize.A3);
                a3Page.AddText("A3 Page Size", 100, 1150, "Helvetica", 24)
                      .AddText($"Dimensions: {a3Page.Width} x {a3Page.Height} points", 100, 1110, "Helvetica", 16)
                      .AddText("Standard: 297 √ó 420 mm (11.69 √ó 16.54 inches)", 100, 1080, "Helvetica", 14)
                      .AddText("Exactly twice the size of A4", 100, 1050, "Helvetica", 12)
                      .AddText("Perfect for: Posters, diagrams, large tables", 100, 1030, "Helvetica", 12)
                      .AddText("Professional presentations and technical drawings", 100, 1010, "Helvetica", 12)
                      .AddText("", 100, 980, "Helvetica", 12) // Empty line
                      .AddText("Size Comparison:", 100, 950, "Helvetica", 14)
                      .AddText("‚Ä¢ A3 = 2 √ó A4 pages", 120, 930, "Helvetica", 12)
                      .AddText("‚Ä¢ A4 = 2 √ó A5 pages", 120, 915, "Helvetica", 12)
                      .AddText("‚Ä¢ A5 = 2 √ó A6 pages", 120, 900, "Helvetica", 12)
                      .AddText("", 100, 870, "Helvetica", 12) // Empty line
                      .AddText("This large page demonstrates the scalability", 100, 840, "Helvetica", 12)
                      .AddText("of JayPDFLibs across different page formats.", 100, 825, "Helvetica", 12)
                      .AddText("Page 3 of 3 - A3 Format", 100, 50, "Helvetica", 10);

                var filePath = Path.Combine(outputDir, "page-sizes-example.pdf");
                document.SaveToFile(filePath);
                Console.WriteLine($"‚úì Saved: {filePath} ({document.PageCount} pages with different sizes)");
                Console.WriteLine("  üìê Page sizes: A4, Letter, A3");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error creating page sizes PDF: {ex.Message}");
                throw;
            }
        }
    }
}